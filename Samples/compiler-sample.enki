-- Prolog backend examples:

-- Sample code:
square X is: X^2.
display (square 42).

-- AST:
FuncDef
    (CompositeIdentifier (Word "square") (Var "X"))
    (SingletonConstraint
        (CompositeIdentifier (Var "X") (Symbol "^") (Int 2)))

Runnable
    (SingletonConstraint
        (CompositeIdentifier (Word "display") (CompositeIdentifier (Word "square") (Int 42))))

-- Resolved:
ResolvedFuncDef
    (Param Argument X)
    (ResolvedDefId Self (Param Free X))
    (ResolvedSingletonConstraint
        (ResolvedDefId (ResolvedDefId (BuiltIn "pow") (Param (BoundBy Self) X) (Param Literal 2))))

ResolvedRunnable
    (ResolvedSingletonConstraint
        (ResolvedDefId
            (BuiltIn "display")
            (Param Val (ResolvedDefId (User "square") (Param Literal 4)))))

-- Typed:
TypedNode
    (Int -> Int)
    (TypedFuncDef
        (TypedParam Argument Int X)
        (TypedDefId Self (Int -> Int) (TypedParam Var Free Int X))
        (TypedSingletonConstraint
            (TypedDefId
                (TypedDefId (BuiltIn "pow") (Int -> Int -> Int) (TypedParam (BoundBy Self) Int X))
                (Int -> Int)
                (TypedParam Literal Int 2))))

TypedRunnable
    (TypedSingletonConstraint
        (TypedDefId (BuiltIn "display") [(+, Int)]
            (Params [(TypedFuncVal Int (TypedDefId (User "square") (Int -> Int) (Params [(Literal Int 42)])))])))

-- Code generation

:- use_module(library(clpfd)).

square(X, Result) :-
    Result #= X^2.

:- (square(42, Temp), writeln(Temp)).


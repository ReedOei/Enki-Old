----------------------------------------------------
-- The standary library. Will be included by default in all programs.
-- Author: Reed Oei
-- Version: 0.1
-- Date: 2018-10-02
----------------------------------------------------

Optional A may be:
    NoValue.
    Value has: A.

a List (of A) may be:
    Empty.
    Cons has: (Head : A, and Tail : List (of A)).

-- Unify X with the constructor Value, and can ignore and not bind the value inside to anything,
-- because we only care that it has a value at all.
X must exist as V is: X = Value has: V.

-- Define a keyboard friendly version of some built ins
X -> Y if: X → Y.

for all Set have Property if: ∀Set have Property.
exists Set with Property if: ∃Set with Property.
there exists Set with Property if: ∃Set with Property.

-- Wherever the left hand unifies (that is, at all points we will attempt to apply it, and see if it unifies),
-- we will deduce the right hand side as fact as well.
-- Postulates are only present at compile-time (is this true?).
postulate:
    (_Set is increasing) → ((∃_Set with Property) is increasing).

X is the Function of all such V if:
    find all V as Vs, and
    X = Function Vs.

-- Some math related stuff:
N is a multiple of M if: ∃ℤ with (N = _ * M).
N divides M if: M is a multiple of N.

N is even if: N is a multiple of 2.

sum List is:
    when List = Cons has: (Head, and Tail) then:
        sum List = Head + (sum Tail).
    when List = Empty then: sum List = 0.

∑N is:
    X is the sum of all such N, and
    ∑N = X.

the digits of N is:
    when N < 10 then: the digits of N = singleton N.
    otherwise then: the digits of N = Cons has: ((N mod 10), and (the digits of (N / 10))).

-- List stuff:
the first of _ : Cons A (List (of A)) -> A
the first of List is:
    H = Head of List, and
    H must exist as HeadValue, and
    the first of List = HeadValue.

the rest of _ : Cons A (List (of A)) -> List (of A)
the rest of List is:
    T = Tail of List, and
    T must exist as TailValue, and
    the rest of List = TailValue.

-- Written this way so that will work for any type that has the two fields Head and Tail
-- (though other fields will be not be unified with anything).
singleton X is: Cons has: (X, and Empty).

reversing L gives R if:
    when L = Empty then: R = Empty.
    when L = Cons has: (Head, and Tail) then: R = append Tail (singleton Head).

the length of List is:
    when List = Empty then: 0.
    when List = Cons has: (Head, and Tail) then: 1 + (the length of Tail).

